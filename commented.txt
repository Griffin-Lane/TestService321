from fastapi import FastAPI
from pydantic import BaseModel
import os, typing
os.system("pip install gradio")

import gradio as gr

app = FastAPI()

def get_app():
    app = gr.mount_gradio_app(app, demo, path="/")
    return app

def ask(question="howdy?"):
    response = [{
        "score":0,
        "title":question,
        "text":"testing123"
        }]  
    return response

def chatbot(conversation: str):
    new_message = "using a hardcoded string" #ask(conversation)
    resp = ask(conversation)
    #return "User: " + conversation + "\n\nSystem: " + new_message + "\n\n"
    return resp



class Request(BaseModel):
    question: str


class Result(BaseModel):
    score: float
    title: str
    text: str


class Response(BaseModel):
    results: typing.List[Result] # list of Result objects


@app.post("/predict", response_model=Response)
async def predict_api(request: Request):
    results = ask(request.question)
    return Response(
        results=[
            Result(score=r["score"], title=r["title"], text=r["text"])
            for r in results
        ]
    )


# with gr.Blocks() as app:
#     chat = gr.Chatbot()
#     msg = gr.Textbox()
#     app.launch()

demo = gr.Interface(
    fn=chatbot,
    inputs=gr.Textbox(
        label="Ask a question", placeholder="What is the capital of France?"
    ),
    outputs=[gr.Textbox(label="Answer"), gr.Number(label="Score")],
    allow_flagging="never",
)

# demo.launch()
app = gr.mount_gradio_app(app, demo, path="/")
